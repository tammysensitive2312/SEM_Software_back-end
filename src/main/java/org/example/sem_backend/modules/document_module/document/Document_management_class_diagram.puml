@startuml

package use_case_layer {

class LocalFileService {
    - String storageDirectory
    + CompletableFuture<String> uploadFileAsync(MultipartFile file)
    - String uploadFileWithProgress(MultipartFile file, String localPath, String fileId)
    - String sanitizeFileName(String filename)
    - String generateLocalPath(MultipartFile file)
    }

class DocumentManagementService {
    - LocalFileService fileSystem
    +uploadDocument() : String
    +searchDocument() : void
    -parseDocument() : void
    }

'LocalFileService <.. DocumentManagementService
}
package parser_layer {
interface DocumentParser {
    +parseDocument()
}

abstract class AbstractFileParser implements DocumentParser {
    +parseDocument() : void
}

class PdfFileParser extends AbstractFileParser {}
class DocFileParser extends AbstractFileParser {}
class PowerPointFileParser extends AbstractFileParser {}


class DocumentParserFactory {
    +getParser() : DocumentParser
}
}
package data_access_layer {
class MetadataDocumentRepository {
    +saveMetadata() : void
    +searchByKeyword() : void
}
object ElasticsearchQuery {
    +fullTextSearch() : void
    }


}
package data_model_layer {
class Document {
+ String fileId
+ String filePath
+ String name
+ LocalDateTime createdAt
+ JSON metadata
}
class DocumentVersion {
- String id
- String revisionId
- LocalDateTime updatedAt
- Long size

- Long documentId
}

DocumentVersion "n" *-- "1" Document
}

use_case_layer --> parser_layer
use_case_layer --> data_access_layer
parser_layer --> data_model_layer
data_access_layer --> data_model_layer

@enduml