@startuml
!define SpringComponent stereotype

' Interface NotificationChannel
interface NotificationChannel {
    +send(Notification notification)
}

' Enum NotificationType
enum NotificationType {
    EMAIL
    PUSH
    IN_APP
}

' Class NotificationRequest
class NotificationRequest {
    -String recipient
    -String message
    -List<NotificationType> types
    +getRecipient() : String
    +setRecipient(String)
    +getSubject() : String
    +setSubject(String)
    +getMessage() : String
    +setMessage(String)
    +getTypes() : List<NotificationType>
    +setTypes(List<NotificationType>)
}

' Class Notification
class Notification {
    -Long id
    -Set<Long> recipient
    -String message
    -NotificationType type
    -LocalDateTime createdAt
    +getId() : Long
    +setId(Long)
    +getRecipient() : HashSet<Long>
    +setRecipient(Set<Long>)
    +getSubject() : String
    +setSubject(String)
    +getMessage() : String
    +setMessage(String)
    +getType() : NotificationType
    +setType(NotificationType)
    +getCreatedAt() : LocalDateTime
    +setCreatedAt(LocalDateTime)
}

class SseEmitterService {
    +sendNotification(String)
    +addEmitter(SseEmitter emitter, Long userId)
    +removeEmitter(SseEmitter emitter, Long userId)
}

' Classes implementing NotificationChannel
'@Service
class EmailNotificationChannel implements NotificationChannel {
    -JavaMailSender mailSender
    +send(Notification)
}

'@Service
class PushNotificationChannel implements NotificationChannel {
    -PushService pushService
    +send(Notification)
}

'@Service
class InAppNotificationChannel implements NotificationChannel {
    -NotificationRepository notificationRepository
    +send(Notification)
}

InAppNotificationChannel *-- SseEmitterService : has

' NotificationService
'@Service
class NotificationService {
    -Map<NotificationType, NotificationChannel> channels
    +sendNotification(NotificationRequest)
}

' AsyncNotificationService
'@Service
'class AsyncNotificationService {
'    -NotificationService notificationService
'    +sendAsyncNotification(NotificationRequest)
'}

' UserPreferences
'@Entity
class UserPreferences {
    -String userId
    -boolean emailNotifications
    -boolean pushNotifications
    -boolean inAppNotifications
    +getUserId() : String
    +setUserId(String)
    +isEmailNotifications() : boolean
    +setEmailNotifications(boolean)
    +isPushNotifications() : boolean
    +setPushNotifications(boolean)
    +isInAppNotifications() : boolean
    +setInAppNotifications(boolean)
}

' NotificationRepository
'@Repository
interface NotificationRepository {
    +save(Notification) : Notification
}

' NotificationController
'@RestController
class NotificationController {
    -NotificationService notificationService
    +sendNotification(NotificationRequest) : ResponseEntity<String>
}

' Relationships
NotificationService "1" --> "*" NotificationChannel : uses
'AsyncNotificationService "1" --> "1" NotificationService : uses
NotificationController "1" --> "1" NotificationService : uses
NotificationService --> NotificationRepository : uses
@enduml
